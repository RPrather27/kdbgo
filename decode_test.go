package kdb

import (
	"bufio"
	"bytes"
	"fmt"
	"reflect"
	"testing"
	"time"
)

func TestDecoding(t *testing.T) {
	for _, tt := range testCases {
		r := bufio.NewReader(bytes.NewReader(tt.bytes))
		d, _, err := Decode(r)
		if err != nil && tt.k.Type != KERR {
			t.Errorf("Decoding '%s' failed:%s", tt.desc, err)
			continue
		}
		if tt.k.Type == KERR {
			d = Error(err)
		}
		if !reflect.DeepEqual(d, tt.k) {
			t.Errorf("Decoded '%s' incorrectly. Expected '%v', got '%v'\n", tt.desc, tt.k, d)
		}
	}
}

// TODO: remove all tests below and move them to encode_test

//q)-8!0N!0D01:22:33.444555666*1+til 2
// 0D01:22:33.444555666 0D02:45:06.889111332
func TestTimespanVector(t *testing.T) {
	b := []byte{0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x92, 0x9b, 0x4d, 0x50, 0x81, 0x04, 0x00, 0x00, 0x24, 0x37, 0x9b, 0xa0, 0x02, 0x09, 0x00, 0x00}
	r := bufio.NewReader(bytes.NewReader(b))
	d, _, _ := Decode(r)
	if vec, ok := d.Data.([]time.Duration); ok {
		if len(vec) != 2 || vec[0].String() != "1h22m33.444555666s" {
			t.Error("Got - ", d, ", expected - 0D01:22:33.444555666 0D02:45:06.889111332")
		}
	}

}

//-8!`s#`a`b!2 3
func TestSortedDict(t *testing.T) {
	b := []byte{0x01, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x7f, 0x0b, 0x01, 0x02,
		0x00, 0x00, 0x00, 0x61, 0x00, 0x62, 0x00, 0x06,
		0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00}
	r := bufio.NewReader(bytes.NewReader(b))
	d, _, err := Decode(r)
	fmt.Println("Sorted dict", d, err)
	if err != nil {
		t.Fail()
	}

}

//-8!`s#([]a:enlist 2;b:enlist 3)
func TestSortedTable(t *testing.T) {
	b := []byte{0x01, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x62, 0x01, 0x63, 0x0b, 0x00, 0x02, 0x00,
		0x00, 0x00, 0x61, 0x00, 0x62, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x03, 0x01, 0x00,
		0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00}
	r := bufio.NewReader(bytes.NewReader(b))
	tbl, _, err := Decode(r)
	if err != nil {
		t.Error("Sorted table decoding failed - ", err)
	}

	table := tbl.Data.(Table)
	if err != nil {
		t.Error("Failed decode - ", err)
	}
	if len(table.Columns) != len(table.Data) {
		t.Error("count[keys]!=count[values]")
	}
	if table.Columns[0] != "a" || table.Columns[1] != "b" {
		t.Error("Wrong key decoding. Found ", table.Columns)
	}
	if table.Data[0].Data.([]int32)[0] != 2 || table.Data[1].Data.([]int32)[0] != 3 {
		t.Error("Wrong value decoding. Found ", table.Data)
	}

}

// -8!`s#([a:enlist 2]b:enlist 3)
func TestSortedKeyedTable(t *testing.T) {
	b := []byte{0x01, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x7f, 0x62, 0x00, 0x63, 0x0b, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x62, 0x00, 0x63, 0x0b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00}
	r := bufio.NewReader(bytes.NewReader(b))
	d, _, err := Decode(r)
	fmt.Println("Sorted Keyed Table:", d, err)

}

// `byte$enlist til 5
func TestGeneralList(t *testing.T) {
	b := []byte{0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04}
	r := bufio.NewReader(bytes.NewReader(b))
	d, _, err := Decode(r)
	if err != nil {
		t.Error("Decoding failed - ", err)
	}
	rawvec := d.Data.([]*K)
	if len(rawvec) != 1 {
		t.Error("Wrong vector length")
	}
	vec := rawvec[0].Data.([]byte)
	if len(vec) != 5 {
		t.Error("Wrong first element vector lenght - ", len(vec))
	}
	if vec[0] != 0x00 || vec[1] != 0x01 || vec[2] != 0x02 || vec[3] != 0x03 || vec[4] != 0x04 {
		t.Error("Unexpected data found:", vec)
	}
}
